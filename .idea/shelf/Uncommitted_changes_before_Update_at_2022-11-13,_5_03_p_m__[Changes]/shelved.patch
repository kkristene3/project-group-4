Index: app/src/main/java/com/example/mealer_project/data/handlers/MealHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mealer_project.data.handlers;\n\nimport android.util.Log;\n\nimport androidx.annotation.NonNull;\n\nimport com.example.mealer_project.app.App;\nimport com.example.mealer_project.data.entity_models.MealEntityModel;\nimport com.example.mealer_project.data.models.Chef;\nimport com.example.mealer_project.data.models.Meal;\nimport com.example.mealer_project.ui.core.StatefulView;\nimport com.example.mealer_project.utils.Preconditions;\n\nimport java.util.Map;\n\npublic class MealHandler {\n\n    /**\n     * Specify DB operations handled by Meal Handler\n     */\n    public enum dbOperations {\n        ADD_MEAL,\n        ADD_MEAL_TO_OFFERED_LIST,\n        REMOVE_MEAL,\n        REMOVE_MEAL_FROM_OFFERED_LIST,\n        UPDATE_MEAL_INFO,\n        UPDATE_OFFERED_MEALS,\n        ADD_TO_SEARCHABLE_LIST,\n        REMOVE_FROM_SEARCHABLE_LIST,\n        GET_MENU,\n        GET_MEAL_BY_ID,\n        ERROR\n    };\n\n    private StatefulView uiScreen;\n\n    /**\n     * Using the Dispatch-Action Pattern to handle actions dispatched to Meal Handler\n     * @param operationType one of the specified DB operations handled by MealHandler\n     * @param payload an input data for the handler's operation\n     * @param uiScreen instance of the view which needs to know of the operation's success or failure\n     */\n    public void dispatch(dbOperations operationType, Object payload, StatefulView uiScreen) {\n\n        // guard-clause\n        if (Preconditions.isNotNull(uiScreen)) {\n\n            // set the ui screen, so it can be interacted with later on\n            this.uiScreen = uiScreen;\n\n            try {\n                switch (operationType) {\n\n                    case ADD_MEAL:\n                        if (Preconditions.isNotNull(payload) && payload instanceof MealEntityModel) {\n                            // below code might cause exception if validation fails or instance can't be created\n                            Meal newMeal = new Meal((MealEntityModel) payload);\n                            // if meal creation was success, add the meal to database\n                            App.getPrimaryDatabase().MEALS.addMeal(newMeal);\n                        } else {\n                            handleActionFailure( operationType, \"Invalid Meal Object provided\");\n                        }\n                        break;\n\n                    case ADD_MEAL_TO_OFFERED_LIST:\n                        // update meal on remote database first\n                        if (Preconditions.isNotNull(payload) && payload instanceof String) {\n                            App.getPrimaryDatabase().MEALS.addMealToOfferedList((String) payload);\n                        } else {\n                            handleActionFailure( operationType, \"Invalid meal ID provided\");\n                        }\n                        break;\n\n                    case REMOVE_MEAL:\n                        // remove meal on remote database first\n                        if (Preconditions.isNotNull(payload) && payload instanceof String) {\n                            App.getPrimaryDatabase().MEALS.removeMeal((String) payload);\n                        } else {\n                            handleActionFailure( operationType, \"Invalid meal ID provided\");\n                        }\n                        break;\n\n                    case REMOVE_MEAL_FROM_OFFERED_LIST:\n                        if (Preconditions.isNotNull(payload) && payload instanceof String) {\n                            App.getPrimaryDatabase().MEALS.removeMealFromOfferedList((String) payload);\n                        } else {\n                            handleActionFailure( operationType, \"Invalid meal ID provided\");\n                        }\n                        break;\n\n                    case UPDATE_MEAL_INFO:\n                        if (Preconditions.isNotNull(payload) && payload instanceof Meal) {\n                            App.getPrimaryDatabase().MEALS.updateMealInfo((Meal) payload);\n                        } else {\n                            handleActionFailure( operationType, \"Invalid Meal instance provided\");\n                        }\n                        break;\n\n                    case UPDATE_OFFERED_MEALS:\n                        if (Preconditions.isNotNull(payload) && payload instanceof Map) {\n                            updateOfferedMeals((Map<String, Boolean>) payload);\n                        } else {\n                            handleActionFailure( operationType, \"Invalid object provided for map\");\n                        }\n                        break;\n\n                    case GET_MENU:\n                        App.getPrimaryDatabase().MEALS.getMeals();\n                        break;\n\n                    case GET_MEAL_BY_ID:\n                        if (Preconditions.isNotNull(payload)) {\n                            // if we have been provided with both meal id and a chef id\n                            if (payload instanceof String[]) {\n                                String[] ids = (String[]) payload;\n                                App.getPrimaryDatabase().MEALS.getMealById(ids[0], ids[1]);\n                            }\n\n                            // if we only have meal id\n                            else if (payload instanceof String) {\n                                App.getPrimaryDatabase().MEALS.getMealById((String) payload);\n                            }\n\n                            else {\n                                handleActionFailure( operationType, \"Invalid arguments provided for getting meal by id\");\n                            }\n                        } else {\n                            handleActionFailure( operationType, \"No arugments provided for getMealById\");\n                        }\n                        break;\n\n                    default:\n                        Log.e(\"MealHandler dispatch\", \"Action not implemented yet\");\n                }\n            } catch (Exception e) {\n                Log.e(\"MealHandler Dispatch\", \"Exception: \" + e.getMessage());\n                uiScreen.dbOperationFailureHandler(null, \"Dispatch failed: \" + e.getMessage());\n            }\n\n        } else {\n            Log.e(\"MealHandler Dispatch\", \"Invalid instance provided for uiScreen\");\n        }\n    }\n\n    /**\n     * Method which is called AFTER a successful database operation to make updates locally\n     * @param operationType type of database operation which was successful\n     * @param payload data for making changes locally\n     */\n    public void handleActionSuccess(dbOperations operationType, Object payload) {\n        // ensure we have a valid uiScreen to inform of success\n        if(Preconditions.isNotNull(uiScreen)) {\n\n            try {\n                switch (operationType) {\n\n                    case ADD_MEAL:\n                        if (Preconditions.isNotNull(payload) && payload instanceof Meal) {\n                            // add meal locally\n                            ((Chef) App.getUser()).MEALS.addMeal((Meal) payload);\n                            // let UI know about success\n                            uiScreen.dbOperationSuccessHandler(operationType, \"Meal added successfully!\");\n                        } else {\n                            handleActionFailure(operationType, \"Invalid meal object provided\");\n                        }\n                        break;\n\n                    case ADD_MEAL_TO_OFFERED_LIST:\n                        if (Preconditions.isNotNull(payload) && payload instanceof String) {\n                            // update meal locally\n                            ((Chef) App.getUser()).MEALS.addMealToOfferedList((String) payload);\n                        } else {\n                            handleActionFailure(operationType, \"unable to update meal locally as offered, invalid payload\");\n                        }\n\n                        break;\n\n                    case REMOVE_MEAL:\n                        if (Preconditions.isNotNull(payload) && payload instanceof String) {\n                            ((Chef) App.getUser()).MEALS.removeMeal((String) payload);\n                            // let UI know about success\n                            uiScreen.dbOperationSuccessHandler(operationType, \"Meal removed successfully!\");\n                        } else {\n                            handleActionFailure(operationType, \"Invalid meal ID\");\n                        }\n                        break;\n\n                    case REMOVE_MEAL_FROM_OFFERED_LIST:\n                        if (Preconditions.isNotNull(payload) && payload instanceof String) {\n                            ((Chef) App.getUser()).MEALS.removeMealFromOfferedList((String) payload);\n                            // let UI know about success\n                            uiScreen.dbOperationSuccessHandler(operationType, \"Meal removed from offered list!\");\n                        } else {\n                            handleActionFailure(operationType, \"invalid meal ID\");\n                        }\n                        break;\n\n                    case UPDATE_MEAL_INFO:\n                        if (Preconditions.isNotNull(payload) && payload instanceof Meal) {\n                            // update meal locally\n                            ((Chef) App.getUser()).MEALS.updateMeal((Meal) payload);\n                            uiScreen.dbOperationSuccessHandler(operationType, \"updated meal info!\");\n                        } else {\n                            handleActionFailure( operationType, \"Invalid Meal instance provided\");\n                        }\n                        break;\n\n                    case UPDATE_OFFERED_MEALS:\n                        uiScreen.dbOperationSuccessHandler(operationType, \"updated offered meals list!\");\n                        break;\n\n                    case GET_MENU:\n                        // update the Chef's meals locally\n                        if (Preconditions.isNotNull(payload) && payload instanceof Map) {\n                            Map<String, Meal> meals = (Map<String, Meal>) payload;\n                            ((Chef) App.getUser()).MEALS.setMeals(meals);\n                            uiScreen.dbOperationSuccessHandler(operationType, meals);\n                        } else {\n                            handleActionFailure(operationType, \"Invalid payload for getMenu\");\n                        }\n                        break;\n\n                    case GET_MEAL_BY_ID:\n                        if (Preconditions.isNotNull(payload) && payload instanceof Meal) {\n                            uiScreen.dbOperationSuccessHandler(operationType, (Meal) payload);\n                        } else {\n                            handleActionFailure(operationType, \"Failed to get meal by ID\");\n                        }\n                        break;\n\n                    default:\n                        Log.e(\"handleActionSuccess\", \"Action not implemented yet\");\n\n                }\n            } catch (Exception e) {\n                Log.e(\"handleActionSuccess\", \"Success handler exception: \" + e.getMessage());\n                uiScreen.dbOperationFailureHandler(dbOperations.ERROR, \"Failed to process request\");\n            }\n\n        } else {\n            Log.e(\"handleActionSuccess\", \"No UI Screen initialized\");\n        }\n    }\n\n    /**\n     * Method which is called AFTER a failure in a database operation to inform UI\n     * @param operationType type of database operation which failed\n     * @param message a descriptive error message for the developers and analyst (not for client or chef)\n     */\n    public void handleActionFailure(dbOperations operationType, String message) {\n        // ensure we have a valid uiScreen to inform of failure\n        if(Preconditions.isNotNull(uiScreen)) {\n\n            String tag = \"handleActionFailure\";\n            String userMessage = \"Failed to process request\";\n\n            switch (operationType) {\n\n                case ADD_MEAL:\n                    tag = \"addMeal\";\n                    userMessage= \"Failed to add meal!\";\n                    break;\n\n                case ADD_MEAL_TO_OFFERED_LIST:\n                    tag = \"addingMealToOffered\";\n                    userMessage = \"Failed to set meal as offered!\";\n                    break;\n\n                case REMOVE_MEAL:\n                    tag = \"errorRemovingMeal\";\n                    userMessage = \"Failed to remove meal!\";\n                    break;\n\n                case REMOVE_MEAL_FROM_OFFERED_LIST:\n                    tag = \"removeMealFromOffered\";\n                    userMessage = \"Failed to remove meal from offered list!\";\n                    break;\n\n                case UPDATE_MEAL_INFO:\n                    tag = \"updateMealInfo\";\n                    userMessage = \"Failed to update meal info!\";\n                    break;\n\n                case UPDATE_OFFERED_MEALS:\n                    tag = \"error\";\n                    userMessage = \"Failed to update offered meals!\";\n                    break;\n\n                case GET_MENU:\n                    tag = \"errorGetMenu\";\n                    userMessage = \"Failed to get menu!\";\n                    break;\n\n                case GET_MEAL_BY_ID:\n                    tag = \"errorGettingMealById\";\n                    userMessage = \"Failed to get meal by id!\";\n                    break;\n\n                default:\n                    Log.e(\"handleActionSuccess\", \"Action not implemented yet\");\n            }\n\n            // send error\n            Log.e(tag, message);\n            uiScreen.dbOperationFailureHandler(operationType, userMessage);\n\n        } else {\n            Log.e(\"handleActionFailure\", \"No UI Screen initialized\");\n        }\n    }\n\n    /**\n     * Update meals to be offered or un-offered\n     * @param data map containing IDs of the meals to be updated\n     */\n    private void updateOfferedMeals(@NonNull Map<String, Boolean> data) {\n        Chef chef = (Chef) App.getUser();\n        Map<String, Meal> meals = chef.MEALS.getMenu();\n        // guard-clause\n        if (Preconditions.isNotNull(data)) {\n            for (String mealId: data.keySet()) {\n                // check if meal doesn't exists\n                if (meals.get(mealId) == null) {\n                    handleActionFailure(dbOperations.UPDATE_OFFERED_MEALS, \"Could not find a meal for the given meal ID\");\n                    return;\n                }\n\n                // check if meal needs to be updated\n                if (meals.get(mealId).isOffered() != data.get(mealId)) {\n\n                    // if meal needs to be added to offered list\n                    if (data.get(mealId)) {\n                        dispatch(dbOperations.ADD_MEAL_TO_OFFERED_LIST, mealId, uiScreen);\n                    } else {\n                        dispatch(dbOperations.REMOVE_MEAL_FROM_OFFERED_LIST, mealId, uiScreen);\n                    }\n                }\n            }\n            handleActionSuccess(dbOperations.UPDATE_OFFERED_MEALS, null);\n        } else {\n            handleActionFailure(dbOperations.UPDATE_OFFERED_MEALS, \"Invalid data provided to updateOfferedMeals\");\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mealer_project/data/handlers/MealHandler.java b/app/src/main/java/com/example/mealer_project/data/handlers/MealHandler.java
--- a/app/src/main/java/com/example/mealer_project/data/handlers/MealHandler.java	(revision af2aa847fa3bc38c4df1c7078b34098f284e7c28)
+++ b/app/src/main/java/com/example/mealer_project/data/handlers/MealHandler.java	(date 1668376964003)
@@ -7,7 +7,7 @@
 import com.example.mealer_project.app.App;
 import com.example.mealer_project.data.entity_models.MealEntityModel;
 import com.example.mealer_project.data.models.Chef;
-import com.example.mealer_project.data.models.Meal;
+import com.example.mealer_project.data.models.meals.Meal;
 import com.example.mealer_project.ui.core.StatefulView;
 import com.example.mealer_project.utils.Preconditions;
 
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\n    <string name=\"app_name\">Mealer Project</string>\n    <string name=\"title_activity_login\">Login</string>\n    <string name=\"prompt_email\">Email</string>\n    <string name=\"prompt_password\">Password</string>\n    <string name=\"action_sign_in\">Sign in or register</string>\n    <string name=\"action_sign_in_short\">Sign in</string>\n    <string name=\"welcome\">\"Welcome !\"</string>\n    <string name=\"invalid_username\">Not a valid username</string>\n    <string name=\"invalid_password\">Password must be >5 characters</string>\n    <string name=\"login_failed\">\"Login failed\"</string>\n    <string name=\"logo_here\">logo_here</string>\n    <string name=\"log_in\">LOG IN</string>\n    <string name=\"forgot_password\">Forgot Password?</string>\n    <string name=\"instruction_text\">Please submit an image of a void cheque for payment:</string>\n    <string name=\"submit_text\"><![CDATA[Submit ->]]></string>\n    <string name=\"take_photo\">Take Photo</string>\n    <string name=\"upload_photo\">Upload Image/File</string>\n    <string name=\"photo_button_description\">Press to take picture of void cheque</string>\n    <string name=\"upload_button_description\">Upload an image of void cheque</string>\n    <string name=\"logoDescription\">an image of our logo</string>\n    <string name=\"title\">Mealer</string>\n    <string name=\"signUpBtn\">SIGN UP</string>\n    <string name=\"loginBtn\">LOG IN</string>\n    <string name=\"complaint_header\">Complaint Title Here</string>\n    <string name=\"client_name\">Client:</string>\n    <string name=\"chef_name\" />\n    <string name=\"chefs_name\">Chef:</string>\n    <string name=\"meal_name\">Meal</string>\n    <string name=\"description_title\">Description:</string>\n    <string name=\"ban_chef\">Ban Until</string>\n    <string name=\"dismiss\">Dismiss</string>\n    <string name=\"complaint_information\">Complaint Here</string>\n    <string name=\"ban_permanent\">Ban Indefinitely</string>\n    <string name=\"chef_permanent_ban_message\">Your account has been permanently suspended.</string>\n    <string name=\"chef_temp_ban_message\">Your account has been temporarily suspended until </string>\n    <string name=\"view_orders\">View Orders</string>\n    <string name=\"my_menu\">My Menu</string>\n    <string name=\"what_meal_would_you_like_to_add\">WHAT MEAL WOULD YOU LIKE TO ADD?</string>\n    <string name=\"meal_type\">Meal type:</string>\n    <string-array name=\"menu_types_array\">\n        <item>(Select meal type)</item>\n        <item>Vegan</item>\n        <item>Vegetarian</item>\n        <item>Gluten-free</item>\n        <item>Breakfast</item>\n        <item>Lunch</item>\n        <item>Brunch</item>\n        <item>Dinner</item>\n        <item>Appetizer</item>\n        <item>Side Dishes</item>\n        <item>Main</item>\n        <item>Soup</item>\n        <item>Desert</item>\n        <item>Bakery</item>\n        <item>Beverages</item>\n    </string-array>\n    <string name=\"cuisine_type\">Cuisine Type</string>\n    <string name=\"ingredients\">Ingredients:</string>\n    <string name=\"allergen\">Allergens:</string>\n    <string name=\"gluten\">Gluten</string>\n    <string name=\"peanuts\">Peanuts</string>\n    <string name=\"treenuts\">Treenuts</string>\n    <string name=\"celery\">Celery</string>\n    <string name=\"mustard\">Mustard</string>\n    <string name=\"eggs\">Eggs</string>\n    <string name=\"milk\">Milk</string>\n    <string name=\"sesame\">Sesame</string>\n    <string name=\"crustaceans\">Crustaceans</string>\n    <string name=\"fish\">Fish</string>\n    <string name=\"molluscs\">Molluscs</string>\n    <string name=\"soya\">Soya</string>\n    <string name=\"sulphites\">Sulphites</string>\n    <string name=\"lupin\">Lupin</string>\n    <string name=\"price\">Price</string>\n    <string name=\"back\">Back</string>\n    <string name=\"add_meal\">Add Meal</string>\n    <!-- TODO: Remove or change this placeholder text -->\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\n    <string name=\"add_item\">Add Meal</string>\n    <string name=\"offer_meal\">Offer meal?</string>\n\n\n</resources>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
--- a/app/src/main/res/values/strings.xml	(revision af2aa847fa3bc38c4df1c7078b34098f284e7c28)
+++ b/app/src/main/res/values/strings.xml	(date 1668376004803)
@@ -79,6 +79,8 @@
     <string name="hello_blank_fragment">Hello blank fragment</string>
     <string name="add_item">Add Meal</string>
     <string name="offer_meal">Offer meal?</string>
+    <string name="meal_item_offered_label">Offered: </string>
+    <string name="meal_item_cuisine_label">Cuisine: </string>
 
 
 </resources>
Index: app/src/main/java/com/example/mealer_project/ui/screens/NewMealScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mealer_project.ui.screens;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.ArrayAdapter;\nimport android.widget.Button;\nimport android.widget.CheckBox;\nimport android.widget.EditText;\nimport android.widget.Spinner;\nimport android.widget.Switch;\n\nimport com.example.mealer_project.R;\nimport com.example.mealer_project.app.App;\nimport com.example.mealer_project.data.entity_models.MealEntityModel;\nimport com.example.mealer_project.data.handlers.MealHandler;\nimport com.example.mealer_project.data.models.Chef;\nimport com.example.mealer_project.data.models.Meal;\nimport com.example.mealer_project.ui.core.StatefulView;\nimport com.example.mealer_project.ui.core.UIScreen;\npublic class NewMealScreen extends UIScreen implements StatefulView {\n\n    // Variable Declaration\n    protected String allergens = \"\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_new_meal_screen);\n\n        /*\n        Add information to spinner for meal type\n         */\n        Spinner spinner = (Spinner) findViewById(R.id.meal_type);\n        // Create an ArrayAdapter using the string array and a default spinner layout\n        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this,\n                R.array.menu_types_array, android.R.layout.simple_spinner_item);\n        // Specify the layout to use when the list of choices appears\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        // Apply the adapter to the spinner\n        spinner.setAdapter(adapter);\n\n        // attach onClick handlers to buttons\n        attachOnClickListeners();\n\n    }\n\n    /**\n     * this method attaches the click methods to all the buttons\n     */\n    private void attachOnClickListeners() {\n\n        // Variable Declaration\n        Button addMealButton = (Button) findViewById(R.id.add_meal_button);\n        Button backButton = (Button) findViewById(R.id.back_button);\n\n        // Process: setting the new onClick method for addMeal\n        addMealButton.setOnClickListener(new Button.OnClickListener() {\n\n            /**\n             * this method sets the on click for the add meal button\n             * @param view\n             *  the current view\n             */\n            @Override\n            public void onClick(View view) {\n\n                onAddMeal(view); //calling helper method to add the meal\n\n            }\n\n        });\n\n        // Process: setting the new onClick method for the back button\n        backButton.setOnClickListener(new Button.OnClickListener() {\n\n            /**\n             * this method sets the on click for the back button\n             * @param view\n             *  the current view\n             */\n            @Override\n            public void onClick(View view) {\n\n                cancelAddingMeal(); //stopping the activity\n                showNextScreen(); //returning the previous screen\n\n            }\n\n        });\n\n    }\n\n    // Helper Methods for Adding the Meal------------------------------------------------------------------------\n    /**\n     * this method adds the selected allergens to the allergens list\n     */\n    private void addAllergensToList() {\n\n        // Variable Declaration\n        CheckBox currentCheck;\n\n        // Process: adding allergens to list\n        if (findViewById(R.id.gluten_checkbox).isSelected()) { //gluten\n\n            // Initialization\n            currentCheck = (CheckBox) findViewById(R.id.gluten_checkbox);\n\n            allergens += \", \" + currentCheck.getText().toString(); //adding to allergens String\n\n        }\n        if (findViewById(R.id.peanuts_checkbox).isSelected()) { //peanuts\n\n            // Initialization\n            currentCheck = (CheckBox) findViewById(R.id.peanuts_checkbox);\n\n            allergens += \", \" + currentCheck.getText().toString(); //adding to allergens String\n\n        }\n        if (findViewById(R.id.treenuts_checkbox).isSelected()) { //treenuts\n\n            // Initialization\n            currentCheck = (CheckBox) findViewById(R.id.treenuts_checkbox);\n\n            allergens += \", \" + currentCheck.getText().toString(); //adding to allergens String\n\n        }\n        if (findViewById(R.id.celery_checkbox).isSelected()) { //celery\n\n            // Initialization\n            currentCheck = (CheckBox) findViewById(R.id.celery_checkbox);\n\n            allergens += \", \" + currentCheck.getText().toString(); //adding to allergens String\n\n        }\n        if (findViewById(R.id.mustard_checkbox).isSelected()) { //mustard\n\n            // Initialization\n            currentCheck = (CheckBox) findViewById(R.id.mustard_checkbox);\n\n            allergens += \", \" + currentCheck.getText().toString(); //adding to allergens String\n\n        }\n        if (findViewById(R.id.eggs_checkbox).isSelected()) { //eggs\n\n            // Initialization\n            currentCheck = (CheckBox) findViewById(R.id.eggs_checkbox);\n\n            allergens += \", \" + currentCheck.getText().toString(); //adding to allergens String\n\n        }\n        if (findViewById(R.id.milk_checkbox).isSelected()) { //milk\n\n            // Initialization\n            currentCheck = (CheckBox) findViewById(R.id.milk_checkbox);\n\n            allergens += \", \" + currentCheck.getText().toString(); //adding to allergens String\n\n        }\n        if (findViewById(R.id.sesame_checkbox).isSelected()) { //sesame\n\n            // Initialization\n            currentCheck = (CheckBox) findViewById(R.id.sesame_checkbox);\n\n            allergens += \", \" + currentCheck.getText().toString(); //adding to allergens String\n\n        }\n        if (findViewById(R.id.fish_checkbox).isSelected()) { //fish\n\n            // Initialization\n            currentCheck = (CheckBox) findViewById(R.id.fish_checkbox);\n\n            allergens += \", \" + currentCheck.getText().toString(); //adding to allergens String\n\n        }\n        if (findViewById(R.id.crustaceans_checkbox).isSelected()) { //crustaceans\n\n            // Initialization\n            currentCheck = (CheckBox) findViewById(R.id.crustaceans_checkbox);\n\n            allergens += \", \" + currentCheck.getText().toString(); //adding to allergens String\n\n        }\n        if (findViewById(R.id.molluscs_checkbox).isSelected()) { //molluscs\n\n            // Initialization\n            currentCheck = (CheckBox) findViewById(R.id.molluscs_checkbox);\n\n            allergens += \", \" + currentCheck.getText().toString(); //adding to allergens String\n\n        }\n        if (findViewById(R.id.soya_checkbox).isSelected()) { //soya\n\n            // Initialization\n            currentCheck = (CheckBox) findViewById(R.id.soya_checkbox);\n\n            allergens += \", \" + currentCheck.getText().toString(); //adding to allergens String\n\n        }\n        if (findViewById(R.id.sulphites_checkbox).isSelected()) { //sulphites\n\n            // Initialization\n            currentCheck = (CheckBox) findViewById(R.id.sulphites_checkbox);\n\n            allergens += \", \" + currentCheck.getText().toString(); //adding to allergens String\n\n        }\n        if (findViewById(R.id.lupin_checkbox).isSelected()) { //lupin\n\n            // Initialization\n            currentCheck = (CheckBox) findViewById(R.id.lupin_checkbox);\n\n            allergens += \", \" + currentCheck.getText().toString(); //adding to allergens String\n\n        }\n\n    }\n\n    /**\n     * this method creates the new meal and adds it to the chef's menu\n     * @param view\n     *  the current view selected\n     */\n    public void onAddMeal(View view) {\n\n        addAllergensToList(); //calling helper method to add all allergens\n\n        // Variable Declaration\n        Chef chef = (Chef) App.getAppInstance().getUser();\n        String chefID = chef.getUserId();\n\n        EditText mealName = (EditText) findViewById(R.id.meal_name);\n        EditText cuisineType = (EditText) findViewById(R.id.cuisine_type);\n        Spinner mealType = (Spinner) findViewById(R.id.meal_type);\n        EditText ingredients = (EditText) findViewById(R.id.ingredients);\n        EditText description = (EditText) findViewById(R.id.description);\n        EditText price = (EditText) findViewById(R.id.price);\n        Switch offered = (Switch)findViewById((R.id.offer_meal_switch));\n\n        double priceValue;\n\n        // Process: validating the price\n        try {\n\n            // Initialization\n            priceValue = Double.parseDouble(price.getText().toString());\n\n            // Variable Declaration\n            MealEntityModel mealEntityModel = new MealEntityModel(mealName.getText().toString(), chefID, cuisineType.getText().toString(),\n                  mealType.getSelectedItem().toString(), ingredients.getText().toString(), allergens,\n                  description.getText().toString(), offered.isChecked(), priceValue);\n\n\n            App.MEAL_HANDLER.dispatch(MealHandler.dbOperations.ADD_MEAL, mealEntityModel, this); //calling add meal method from mealhandler\n\n        }\n        catch(NumberFormatException e) {\n\n            // error toast here\n            displayErrorToast(\"Incorrect price formatting!\");\n\n        }\n\n    }\n\n    /**\n     * this helper method cancels the add meal action and ends the activity\n     */\n    private void cancelAddingMeal() {\n        // finish the activity and return\n        this.setResult(Activity.RESULT_CANCELED);\n        this.finish();\n    }\n\n    // UI Methods-----------------------------------------------------------------------------------------------\n    @Override\n    public void updateUI() {}\n\n    /**\n     * this method returns the chef to the main screen\n     */\n    @Override\n    public void showNextScreen() {\n\n        // Variable Declaration\n        Intent intent = new Intent(getApplicationContext(), ChefScreen.class);\n\n        // Process: starting new intent\n        startActivity(intent);\n\n    }\n\n    // Firebase Methods------------------------------------------------------------------------------------------\n    @Override\n    public void dbOperationSuccessHandler(Object dbOperation, Object payload) {\n        if (dbOperation == MealHandler.dbOperations.ADD_MEAL) {\n            // adding new meal completed\n            displaySuccessToast((String) payload);\n            // finish the activity and return\n            this.setResult(Activity.RESULT_OK);\n            this.finish();\n            \n            showNextScreen(); //returning to chef's main screen\n        }\n    }\n\n    @Override\n    public void dbOperationFailureHandler(Object dbOperation, Object payload) {\n        if (dbOperation == MealHandler.dbOperations.ADD_MEAL) {\n            // failed adding a new meal\n            displayErrorToast(\"Failed to add meal!\");\n        }\n    }\n    \n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mealer_project/ui/screens/NewMealScreen.java b/app/src/main/java/com/example/mealer_project/ui/screens/NewMealScreen.java
--- a/app/src/main/java/com/example/mealer_project/ui/screens/NewMealScreen.java	(revision af2aa847fa3bc38c4df1c7078b34098f284e7c28)
+++ b/app/src/main/java/com/example/mealer_project/ui/screens/NewMealScreen.java	(date 1668376970787)
@@ -16,7 +16,7 @@
 import com.example.mealer_project.data.entity_models.MealEntityModel;
 import com.example.mealer_project.data.handlers.MealHandler;
 import com.example.mealer_project.data.models.Chef;
-import com.example.mealer_project.data.models.Meal;
+import com.example.mealer_project.data.models.meals.Meal;
 import com.example.mealer_project.ui.core.StatefulView;
 import com.example.mealer_project.ui.core.UIScreen;
 public class NewMealScreen extends UIScreen implements StatefulView {
Index: app/src/main/java/com/example/mealer_project/data/models/meals/Meal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mealer_project.data.models;\n\n\nimport com.example.mealer_project.data.entity_models.MealEntityModel;\n\n/**\n * This class is a template/blueprint for each instance of a Meal on a chef's menu\n */\npublic class Meal {\n    private String errorMsg = \"\";\n\n    private String name;\n    private String mealID;\n    private String chefID;\n    private String cuisineType;\n    private String mealType;\n    private String ingredients;\n    private String allergens;\n    private String description;\n    private boolean offered;\n    private double price;\n    /**\n     * Create an instance of an existing meal with a mealID from FireBase\n     * @param name Name of the meal\n     * @param mealID ID number of the meal\n     * @param chefID Chef ID of the meal\n     * @param cuisineType Cuisine Type of the meal (Italian, Chinese, Greek)\n     * @param mealType Meal Type (Main dish, Soup, Desert)\n     * @param ingredients Ingredients used in the meal\n     * @param allergens Potential allergens in meal\n     * @param description Short description of the meal\n     * @param offered Whether the meal is currently offered or not\n     * @param price Current price of the meal\n     */\n    public Meal(String name, String mealID, String chefID, String cuisineType, String mealType,\n         String ingredients, String allergens, String description, boolean offered, double price) {\n\n        this.setName(name);\n        this.setMealID(mealID);\n        this.setChefID(chefID);\n        this.setCuisineType(cuisineType);\n        this.setMealType(mealType);\n        this.setIngredients(ingredients);\n        this.setAllergens(allergens);\n        this.setDescription(description);\n        this.setOffered(offered);\n        this.setPrice(price);\n    }\n\n    /**\n     * Create an instance of meal using MealEntityModel\n     * @param mealEntityModel meal info to create\n     */\n    public Meal (MealEntityModel mealEntityModel){\n\n        this.setName( mealEntityModel.getName());\n        this.setMealID( mealEntityModel.getMealID());\n        this.setChefID( mealEntityModel.getChefID());\n        this.setCuisineType( mealEntityModel.getCuisineType());\n        this.setMealType( mealEntityModel.getMealType());\n        this.setIngredients( mealEntityModel.getIngredients());\n        this.setAllergens( mealEntityModel.getAllergens());\n        this.setDescription( mealEntityModel.getDescription());\n        this.setOffered( mealEntityModel.isOffered());\n        this.setPrice( mealEntityModel.getPrice());\n\n    }\n    \n    /**\n     * Create an instance of a new meal\n     * @param name Name of the meal\n     * @param chefID Chef ID of the meal\n     * @param cuisineType Cuisine Type of the meal (Italian, Chinese, Greek)\n     * @param mealType Meal Type (Main dish, Soup, Desert)\n     * @param ingredients Ingredients used in the meal\n     * @param allergens Potential allergens in meal\n     * @param description Short description of the meal\n     * @param offered Whether the meal is currently offered or not\n     * @param price Current price of the meal\n     */\n    public Meal(String name, String chefID, String cuisineType, String mealType, String ingredients,\n         String allergens, String description, boolean offered, double price) {\n\n        // Initialization\n        this.setName(name);\n        this.setChefID(chefID);\n        this.setCuisineType(cuisineType);\n        this.setMealType(mealType);\n        this.setIngredients(ingredients);\n        this.setAllergens(allergens);\n        this.setDescription(description);\n        this.setOffered(offered);\n        this.setPrice(price);\n        \n    }\n\n    /**\n     * Get the name of the meal\n     * @return Meal name\n     */\n    public String getName() { return name; }\n\n    /**\n     * validates and sets/changes the name of the meal\n     * @param name Meal's name\n     */\n    public void setName(String name) {\n\n        // Process: validating the name\n        if (validateName(name) == true) { //valid\n\n            this.name = name; //setting name\n\n        }\n        else { //invalid\n\n            // Output: error message\n            throw new IllegalArgumentException(errorMsg);\n\n        }\n\n    }\n\n    /**\n     * this helper method validates the name and checks that it's not empty\n     * @param name the name of the meal\n     * @return whether the name is valid or not\n     */\n    private boolean validateName(String name) {\n\n        // Process: checking name length\n        if (name.length() > 0) { //at least 1 char\n\n            if (name.length() > 50) { //too long\n\n                errorMsg = \"Please limit the meal name to 50 characters\"; //updating error msg\n\n                return false;\n\n            }\n\n            return true;\n\n        }\n        else { //nothing inputted\n\n            errorMsg = \"Meal cannot be unnamed\"; //updating error msg\n\n            return false;\n\n        }\n\n    }\n\n    /**\n     * Get the ID String of the meal\n     * @return Meal's ID (Identification)\n     */\n    public String getMealID() { return mealID; }\n\n    /**\n     * Set/Change the ID of the meal\n     * @param mealID of meal\n     */\n    public void setMealID(String mealID) {\n        this.mealID = mealID;\n    }\n\n    /**\n     * Get the ID of the chef who cooked meal\n     * @return Chef's ID\n     */\n    public String getChefID() { return chefID; }\n\n    /**\n     * Set/Change Chef's ID\n     * @param chefID of meal\n     */\n    public void setChefID(String chefID) {\n        this.chefID = chefID;\n    }\n\n    /**\n     * Get the cuisine type of the meal\n     * @return Meal's Cuisine Type\n     */\n    public String getCuisineType() { return cuisineType; }\n\n    /**\n     * validates & sets/changes Meal's Cuisine Type\n     * @param cuisineType of meal\n     */\n    public void setCuisineType(String cuisineType) {\n\n        // Process: validating the cuisine type\n        if (validateCuisine(cuisineType)) { //valid\n\n            this.cuisineType = cuisineType;\n\n        }\n        else { //invalid\n\n            throw new IllegalArgumentException(errorMsg);\n\n        }\n\n    }\n\n    /**\n     * this helper method validates the cuisine type\n     * @param cuisineType the cuisine type\n     * @return whether it is valid or not\n     */\n    private boolean validateCuisine(String cuisineType) {\n\n        if (cuisineType.length() > 0) { //at least 1 char\n\n            // Variable Declaration\n            char[] charsInCuisine = cuisineType.toCharArray();\n\n            // Process: validating input\n            for (int i = 0; i < charsInCuisine.length; i++) {\n\n                // Process: checking for all letters\n                if (!Character.isLetter(charsInCuisine[i])) { //is not letter\n\n                    if (!(charsInCuisine[i] == 45 || charsInCuisine[i] == 32)) { //not hyphen or space\n\n                        errorMsg = \"Invalid characters in cuisine type\";\n\n                        return false;\n\n                    }\n\n                }\n\n            }\n\n            return true;\n\n        }\n        else { //nothing inputted\n\n            errorMsg = \"Cuisine type cannot be empty\";\n\n            return false;\n\n        }\n\n    }\n\n    /**\n     * Get the type of the meal (Main dish, soup, etc)\n     * @return Meal's type\n     */\n    public String getMealType() { return mealType; }\n\n    /**\n     * Change the type of the meal\n     * @param mealType of meal\n     */\n    public void setMealType(String mealType) {\n        this.mealType = mealType;\n    }\n\n    /**\n     * Get the list of ingredients used in the meal\n     * @return Ingredients used in meal\n     */\n    public String getIngredients() { return ingredients; }\n\n    /**\n     * Set/Change the list of ingredients used in meal\n     * @param ingredients list\n     */\n    public void setIngredients(String ingredients) {\n\n        // Process: validating the cuisine type\n        if (ingredients.length() > 0) { //valid\n\n            this.ingredients = ingredients;\n\n        }\n        else { //invalid\n\n            throw new IllegalArgumentException(\"Please specify the ingredients in this meal\");\n\n        }\n\n    }\n\n    /**\n     * Get the list of allergens of the meal\n     * @return Allergen list for meal\n     */\n    public String getAllergens() { return allergens; }\n\n    /**\n     * Set/Change the list of allergens of the meal\n     * @param allergens list\n     */\n    public void setAllergens(String allergens) {\n        this.allergens = allergens;\n    }\n\n    /**\n     * Get a short description of the meal\n     * @return Meal Description\n     */\n    public String getDescription() { return description; }\n\n    /**\n     * Set/Change the description of the meal\n     * @param description of meal\n     */\n    public void setDescription(String description) {\n\n        if (description.length() >= 20) { //valid\n\n            this.description = description;\n\n        }\n        else { //too short or nothing inputted\n\n            throw new IllegalArgumentException(\"Description should be at least 20 characters long\");\n\n        }\n\n    }\n\n    /**\n     * Check if a meal is currently being offered by a chef or not\n     * @return Boolean representing True if offered, False if not offered\n     */\n    public boolean isOffered() { return offered; }\n\n    /**\n     * Set/Change the state of whether meal is offered or not\n     * @param offered offered or not\n     */\n    public void setOffered(boolean offered) {\n        this.offered = offered;\n    }\n\n    /**\n     * Get the price of the meal offered by chef\n     * @return Meal price\n     */\n    public double getPrice() { return price; }\n\n    /**\n     * Set/Change the price of the meal\n     * @param price Meal Price\n     */\n    public void setPrice(double price) {\n        this.price = price;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mealer_project/data/models/meals/Meal.java b/app/src/main/java/com/example/mealer_project/data/models/meals/Meal.java
--- a/app/src/main/java/com/example/mealer_project/data/models/meals/Meal.java	(revision af2aa847fa3bc38c4df1c7078b34098f284e7c28)
+++ b/app/src/main/java/com/example/mealer_project/data/models/meals/Meal.java	(date 1668374819714)
@@ -1,12 +1,14 @@
-package com.example.mealer_project.data.models;
+package com.example.mealer_project.data.models.meals;
 
 
 import com.example.mealer_project.data.entity_models.MealEntityModel;
 
+import java.io.Serializable;
+
 /**
  * This class is a template/blueprint for each instance of a Meal on a chef's menu
  */
-public class Meal {
+public class Meal implements Serializable {
     private String errorMsg = "";
 
     private String name;
Index: app/src/main/java/com/example/mealer_project/data/sources/actions/MealActions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mealer_project.data.sources.actions;\n\nimport static android.content.ContentValues.TAG;\n\nimport static com.example.mealer_project.data.handlers.MealHandler.dbOperations.*;\n\nimport android.util.Log;\n\nimport androidx.annotation.NonNull;\n\nimport com.example.mealer_project.app.App;\nimport com.example.mealer_project.data.entity_models.MealEntityModel;\nimport com.example.mealer_project.data.models.Chef;\nimport com.example.mealer_project.data.models.Meal;\nimport com.example.mealer_project.utils.Preconditions;\nimport com.google.android.gms.tasks.OnCompleteListener;\nimport com.google.android.gms.tasks.OnFailureListener;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.android.gms.tasks.Task;\nimport com.google.firebase.firestore.CollectionReference;\nimport com.google.firebase.firestore.DocumentReference;\nimport com.google.firebase.firestore.DocumentSnapshot;\nimport com.google.firebase.firestore.FirebaseFirestore;\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\nimport com.google.firebase.firestore.QuerySnapshot;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class MealActions {\n\n    FirebaseFirestore database;\n    private final static String MEAL_COLLECTION = \"Meals\";\n    private final static String CHEF_COLLECTION = \"Chefs\";\n\n    public MealActions(FirebaseFirestore database) {\n        this.database = database;\n    }\n\n    /**\n     * Add meal to list of meals in Firebase\n     * @param meal The meal to be added\n     */\n    public void addMeal(Meal meal){\n\n        if (Preconditions.isNotNull(meal)) {\n\n            Map<String, Object> databaseMeal = new HashMap<>();\n\n            databaseMeal.put(\"name\", meal.getName());\n            databaseMeal.put(\"chefID\", meal.getChefID());\n            databaseMeal.put(\"cuisineType\", meal.getCuisineType());\n            databaseMeal.put(\"mealType\", meal.getMealType());\n            databaseMeal.put(\"ingredients\", meal.getIngredients());\n            databaseMeal.put(\"allergens\", meal.getAllergens());\n            databaseMeal.put(\"description\", meal.getDescription());\n            databaseMeal.put(\"isOffered\", meal.isOffered());\n            databaseMeal.put(\"price\", meal.getPrice());\n\n\n            // Add meal to chef's list in firebase\n            database.collection(CHEF_COLLECTION)\n                    .document(App.getUserId())\n                    .collection(\"meals\")\n                    .add(databaseMeal)\n                    .addOnSuccessListener(new OnSuccessListener<DocumentReference>() {\n                        @Override\n                        public void onSuccess(DocumentReference documentReference) {\n                            // update complaint id\n                            meal.setMealID(documentReference.getId());\n                            App.MEAL_HANDLER.handleActionSuccess(ADD_MEAL, meal);\n                        }\n                    })\n                    .addOnFailureListener(new OnFailureListener() {\n                        @Override\n                        public void onFailure(@NonNull Exception e) {\n                            App.MEAL_HANDLER.handleActionFailure(ADD_MEAL, \"Failed to add meal to chef in database: \" + e.getMessage());\n                        }\n                    });\n\n            // Add meal to meals collection in Firebase\n            database.collection(MEAL_COLLECTION)\n                    .document(meal.getMealID())\n                    .set(databaseMeal)\n                    .addOnSuccessListener(new OnSuccessListener<Void>() {\n                        @Override\n                        public void onSuccess(Void aVoid) {\n                            //App.MEAL_HANDLER.successAddingMeal(meal);\n                        }\n                    })\n                    .addOnFailureListener(new OnFailureListener() {\n                        @Override\n                        public void onFailure(@NonNull Exception e) {\n                            //App.MEAL_HANDLER.errorAddingMeal(\"Failed to add meal to list of meals in database: \" + e.getMessage());\n                        }\n                    });\n\n\n        } else {\n            // if Preconditions fail\n            Log.e(\"addMeal\", \"Invalid object value for meal\");\n        }\n    }\n\n    /**\n     * Remove meal from searchable list of meals in Firebase\n     * @param mealId The mealId of meal to be removed\n     */\n    public void removeMeal(String mealId){\n\n        Chef chef;\n\n        try {\n            if (Preconditions.isNotNull(mealId)) {\n\n                chef = (Chef) App.getUser();\n\n                // Remove meal from chef's list in firebase\n                database.collection(CHEF_COLLECTION)\n                        .document(chef.getUserId())\n                        .collection(\"meals\")\n                        .document(mealId)\n                        .delete()\n                        .addOnSuccessListener(new OnSuccessListener<Void>() {\n                            @Override\n                            public void onSuccess(Void aVoid) {\n                                App.MEAL_HANDLER.handleActionSuccess(REMOVE_MEAL, mealId);\n                            }\n                        })\n                        .addOnFailureListener(new OnFailureListener() {\n                            @Override\n                            public void onFailure(@NonNull Exception e) {\n                                App.MEAL_HANDLER.handleActionFailure(REMOVE_MEAL, \"Failed to remove meal in chef's list in Firebase: \" + e.getMessage());\n                            }\n                        });\n\n                // Remove meal from meals collection in Firebase\n                database.collection(MEAL_COLLECTION)\n                        .document(mealId)\n                        .delete()\n                        .addOnSuccessListener(new OnSuccessListener<Void>() {\n                            @Override\n                            public void onSuccess(Void aVoid) {\n                                //App.MEAL_HANDLER.successRemovingMeal(mealId);\n                            }\n                        })\n                        .addOnFailureListener(new OnFailureListener() {\n                            @Override\n                            public void onFailure(@NonNull Exception e) {\n                                //App.MEAL_HANDLER.errorRemovingMeal(\"Failed to remove meal to searchable list in database: \" + e.getMessage());\n                            }\n                        });\n            } else {\n                // if Preconditions fail\n                Log.e(\"removeMealFromSearch\", \"Invalid object value for meal\");\n            }\n        } catch (Exception e) {\n            Log.e(\"removeMeal\", \"Current logged in user is not a chef. Wrong removeMeal overloaded method called?: \" + e.getMessage());\n            App.MEAL_HANDLER.handleActionFailure(REMOVE_MEAL, \"Unable to process request at this moment\");\n        }\n\n    }\n\n    /**\n     * Set isOffered property to true to a meal in a specific chef's list of meals in Firebase\n     * @param mealId The mealId of meal to be updated\n     */\n    public void addMealToOfferedList(String mealId){\n\n        if (Preconditions.isNotNull(mealId)) {\n\n            // Set isOffered to true in chef's meals in firebase\n            database.collection(CHEF_COLLECTION)\n                    .document(App.getUserId())\n                    .collection(\"meals\")\n                    .document(mealId)\n                    .update(\"isOffered\", true)\n                    .addOnSuccessListener(new OnSuccessListener<Void>() {\n                        @Override\n                        public void onSuccess(Void aVoid) {\n                            App.MEAL_HANDLER.handleActionSuccess(ADD_MEAL_TO_OFFERED_LIST, mealId);\n                            //addMealToSearchableList(mealToMapConversion(getMealFromMealId(mealId, chefId)));\n                        }\n                    })\n                    .addOnFailureListener(new OnFailureListener() {\n                        @Override\n                        public void onFailure(@NonNull Exception e) {\n                            App.MEAL_HANDLER.handleActionFailure(ADD_MEAL_TO_OFFERED_LIST, \"Failed to add meal to offered list in chef in database: \" + e.getMessage());\n                        }\n                    });\n\n            // Set isOffered to true in list of meals in firebase\n            database.collection(MEAL_COLLECTION)\n                    .document(mealId)\n                    .update(\"isOffered\", true)\n                    .addOnSuccessListener(new OnSuccessListener<Void>() {\n                        @Override\n                        public void onSuccess(Void aVoid) {\n                            //App.MEAL_HANDLER.successAddingMealToOfferedList(mealId);\n                        }\n                    })\n                    .addOnFailureListener(new OnFailureListener() {\n                        @Override\n                        public void onFailure(@NonNull Exception e) {\n                            //App.MEAL_HANDLER.errorAddingMealToOfferedList(\"Failed to add meal to offered list in chef in database: \" + e.getMessage());\n                        }\n                    });\n\n        } else {\n            // if Preconditions fail\n            Log.e(\"addMealToOfferedList\", \"Invalid object value for mealId\");\n        }\n    }\n\n\n    /**\n     * Set isOffered property to false to a meal in a specific chef's list of meals in Firebase\n     * @param mealId The mealId of meal to be updated\n     */\n    public void removeMealFromOfferedList(String mealId){\n\n        if (Preconditions.isNotNull(mealId)) {\n\n            // Set isOffered to false in specific chef's list of meals\n            database.collection(CHEF_COLLECTION)\n                    .document(App.getUserId())\n                    .collection(\"meals\")\n                    .document(mealId)\n                    .update(\"isOffered\", false)\n                    .addOnSuccessListener(new OnSuccessListener<Void>() {\n                        @Override\n                        public void onSuccess(Void aVoid) {\n                            App.MEAL_HANDLER.handleActionFailure(REMOVE_MEAL_FROM_OFFERED_LIST, mealId);\n                        }\n                    })\n                    .addOnFailureListener(new OnFailureListener() {\n                        @Override\n                        public void onFailure(@NonNull Exception e) {\n                            App.MEAL_HANDLER.handleActionFailure(REMOVE_MEAL_FROM_OFFERED_LIST, \"Failed to add meal to offered list in chef in database: \" + e.getMessage());\n                        }\n                    });\n\n            // Set isOffered to false in list of meals in firebase\n            database.collection(MEAL_COLLECTION)\n                    .document(mealId)\n                    .update(\"isOffered\", false)\n                    .addOnSuccessListener(new OnSuccessListener<Void>() {\n                        @Override\n                        public void onSuccess(Void aVoid) {\n                            App.MEAL_HANDLER.handleActionSuccess(REMOVE_FROM_SEARCHABLE_LIST, mealId);\n                        }\n                    })\n                    .addOnFailureListener(new OnFailureListener() {\n                        @Override\n                        public void onFailure(@NonNull Exception e) {\n                            App.MEAL_HANDLER.handleActionFailure(REMOVE_FROM_SEARCHABLE_LIST, e.getMessage());\n                        }\n                    });\n        } else {\n            // if Preconditions fail\n            Log.e(\"removeMealFromSearch\", \"Invalid object value for meal\");\n        }\n    }\n\n    /**\n     * Get meal from Firebase for the current logged in chef\n     * @param mealId The mealId of meal\n     */\n    public void getMealById (String mealId) {\n\n        Chef chef;\n\n        try {\n            chef = (Chef) App.getUser();\n\n            DocumentReference mealReference = database.collection(CHEF_COLLECTION).document(chef.getUserId()).collection(MEAL_COLLECTION).document(mealId);\n\n            mealReference.get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\n                @Override\n                public void onComplete(@NonNull Task<DocumentSnapshot> task) {\n\n                    if (task.isSuccessful()) {\n                        DocumentSnapshot document = task.getResult();\n                        if (document.exists()) {\n                            Log.d(TAG, \"DocumentSnapshot data: \" + document.getData());\n\n                            if (document.getData() != null){\n                                App.MEAL_HANDLER.handleActionSuccess(GET_MEAL_BY_ID, makeMealFromFirebase(document));\n                            }\n\n                        } else {\n                            Log.d(TAG, \"No such document\");\n                            App.MEAL_HANDLER.handleActionFailure(GET_MEAL_BY_ID,\"Could not find a meal with provided ID\");\n                        }\n                    } else {\n                        Log.d(TAG, \"get failed with \", task.getException());\n                        App.MEAL_HANDLER.handleActionFailure( GET_MEAL_BY_ID, \"Failed to retrieve meal\");\n                    }\n                }\n            });\n\n        } catch (Exception e) {\n            Log.e(\"getMealById\", \"Current logged in user is not a chef. Wrong getMealById overloaded method called?: \" + e.getMessage());\n            App.MEAL_HANDLER.handleActionFailure(GET_MEAL_BY_ID, \"Unable to process request at this moment\");\n        }\n    }\n\n    /**\n     * Get meal from Firebase given the mealId AND chefId\n     * @param mealId The mealId of meal\n     */\n    public void getMealById (String mealId, String chefId) {\n\n        Meal meal;\n        DocumentReference mealReference = database.collection(CHEF_COLLECTION).document(chefId).collection(MEAL_COLLECTION).document(mealId);\n\n        mealReference.get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<DocumentSnapshot> task) {\n\n                if (task.isSuccessful()) {\n                    DocumentSnapshot document = task.getResult();\n                    if (document.exists()) {\n                        Log.d(TAG, \"DocumentSnapshot data: \" + document.getData());\n\n                        if (document.getData() != null){\n                           App.MEAL_HANDLER.handleActionSuccess(GET_MEAL_BY_ID, makeMealFromFirebase(document));\n                        }\n\n                    } else {\n                        Log.d(TAG, \"No such document\");\n                        App.MEAL_HANDLER.handleActionFailure(GET_MEAL_BY_ID,\"Could not find a meal with provided ID\");\n                    }\n                } else {\n                    Log.d(TAG, \"get failed with \", task.getException());\n                    App.MEAL_HANDLER.handleActionFailure( GET_MEAL_BY_ID, \"Failed to retrieve meal\");\n                }\n            }\n        });\n    }\n\n    /**\n     * Set meals list to specific chef locally using App instance user\n     */\n    public void getMeals(){\n\n        Chef chef = (Chef) App.getUser();\n\n        CollectionReference mealsReference = database.collection(CHEF_COLLECTION).document(chef.getUserId()).collection(MEAL_COLLECTION);\n\n        mealsReference.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n\n                    Map<String, Meal> meals = new HashMap<String, Meal>();\n\n                    for (QueryDocumentSnapshot document : task.getResult()) {\n                        Log.d(TAG, document.getId() + \" => \" + document.getData());\n\n                        Meal meal = makeMealFromFirebase(document);\n                        meals.put(document.getId(), meal);\n                        App.MEAL_HANDLER.handleActionSuccess(GET_MENU, meals);\n                    }\n                } else {\n                    Log.d(TAG, \"Error getting documents: \", task.getException());\n                    App.MEAL_HANDLER.handleActionFailure( GET_MENU, \"Failed to retrieve meals from firebase\");\n                }\n            }\n        });\n    }\n\n    /**\n     * Set meals list to specific chef locally using chefID\n     * @param chefId Id of chef to get meals from\n     */\n    public void getMeals(String chefId){\n\n\n        CollectionReference mealsReference = database.collection(CHEF_COLLECTION).document(chefId).collection(MEAL_COLLECTION);\n\n        mealsReference.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\n            @Override\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\n                if (task.isSuccessful()) {\n\n                    Map<String, Meal> meals = new HashMap<String, Meal>();\n\n                    for (QueryDocumentSnapshot document : task.getResult()) {\n                        Log.d(TAG, document.getId() + \" => \" + document.getData());\n\n                        Meal meal = makeMealFromFirebase(document);\n                        meals.put(document.getId(), meal);\n                        App.MEAL_HANDLER.handleActionSuccess(GET_MENU, meals);\n                    }\n                } else {\n                    Log.d(TAG, \"Error getting documents: \", task.getException());\n                    App.MEAL_HANDLER.handleActionFailure( GET_MENU, \"Failed to retrieve meals from firebase\");\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Update meal info in Firebase in chef object and searchable meals list if it is offered\n     * Removes list from offered list and searchable list if isOffered boolean is updated to false\n     * @param meal new Meal object with info to update\n     */\n    public void updateMealInfo(Meal meal){\n\n        if (Preconditions.isNotNull(meal)) {\n\n                database.collection(CHEF_COLLECTION)\n                        .document(App.getUserId())\n                        .collection(\"meals\")\n                        .document(meal.getMealID())\n                        .update(\"name\",meal.getName(),\n                                \"cuisineType\", meal.getCuisineType(),\n                                \"mealType\", meal.getMealType(),\n                                \"ingredients\", meal.getIngredients(),\n                                \"allergens\", meal.getAllergens(),\n                                \"description\", meal.getDescription(),\n                                \"isOffered\", meal.isOffered(),\n                                \"price\", meal.getPrice())\n                        .addOnSuccessListener(new OnSuccessListener<Void>() {\n                            @Override\n                            public void onSuccess(Void aVoid) {\n                                App.MEAL_HANDLER.handleActionSuccess(UPDATE_MEAL_INFO, meal);\n                            }\n                        })\n                        .addOnFailureListener(new OnFailureListener() {\n                            @Override\n                            public void onFailure(@NonNull Exception e) {\n                                App.MEAL_HANDLER.handleActionFailure( UPDATE_MEAL_INFO, \"Failed to update meal to list in chef in database: \" + e.getMessage());\n                            }\n                        });\n\n                database.collection(MEAL_COLLECTION)\n                        .document(meal.getMealID())\n                        .update(\"name\",meal.getName(),\n                                \"cuisineType\", meal.getCuisineType(),\n                                \"mealType\", meal.getMealType(),\n                                \"ingredients\", meal.getIngredients(),\n                                \"allergens\", meal.getAllergens(),\n                                \"description\", meal.getDescription(),\n                                \"isOffered\", meal.isOffered(),\n                                \"price\", meal.getPrice())\n                        .addOnSuccessListener(new OnSuccessListener<Void>() {\n                            @Override\n                            public void onSuccess(Void aVoid) {\n                                App.MEAL_HANDLER.handleActionSuccess(UPDATE_MEAL_INFO, meal);\n                            }\n                        })\n                        .addOnFailureListener(new OnFailureListener() {\n                            @Override\n                            public void onFailure(@NonNull Exception e) {\n                                App.MEAL_HANDLER.handleActionFailure( UPDATE_MEAL_INFO,\"Failed to update meal to searchable list in database: \" + e.getMessage());\n                            }\n                        });\n        } else {\n            // if Preconditions fail\n            Log.e(\"updateMealInfo\", \"Invalid object value for meal\");\n        }\n    }\n\n\n    private Meal makeMealFromFirebase(DocumentSnapshot document) {\n\n        if (document.getData() == null) {\n            throw new NullPointerException(\"makeClientFromFirebase: invalid document object\");\n        }\n\n        MealEntityModel newMeal = new MealEntityModel();\n        Meal meal = new Meal(newMeal);\n\n        newMeal.setName(String.valueOf(document.getData().get(\"name\")));\n        newMeal.setChefID(String.valueOf(document.getData().get(\"chefId\")));\n        newMeal.setCuisineType(String.valueOf(document.getData().get(\"cuisineType\")));\n        newMeal.setMealType(String.valueOf(document.getData().get(\"mealType\")));\n        newMeal.setIngredients(String.valueOf(document.getData().get(\"ingredients\")));\n        newMeal.setAllergens(String.valueOf(document.getData().get(\"allergens\")));\n        newMeal.setDescription(String.valueOf(document.getData().get(\"description\")));\n        newMeal.setOffered((Boolean) document.getData().get(\"isOffered\"));\n        newMeal.setPrice((Double) document.getData().get(\"price\"));\n\n        return new Meal(newMeal);\n\n    }\n\n    private Map mealToMapConversion(Meal meal){\n\n        Map<String, Object> mealMap = new HashMap<>();\n\n        mealMap.put(\"name\", meal.getName());\n        mealMap.put(\"mealId\", meal.getMealID());\n        mealMap.put(\"chefID\", meal.getChefID());\n        mealMap.put(\"cuisineType\", meal.getCuisineType());\n        mealMap.put(\"mealType\", meal.getMealType());\n        mealMap.put(\"ingredients\", meal.getIngredients());\n        mealMap.put(\"allergens\", meal.getAllergens());\n        mealMap.put(\"description\", meal.getDescription());\n        mealMap.put(\"isOffered\", meal.isOffered());\n        mealMap.put(\"price\", meal.getPrice());\n\n        return mealMap;\n    }\n\n\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mealer_project/data/sources/actions/MealActions.java b/app/src/main/java/com/example/mealer_project/data/sources/actions/MealActions.java
--- a/app/src/main/java/com/example/mealer_project/data/sources/actions/MealActions.java	(revision af2aa847fa3bc38c4df1c7078b34098f284e7c28)
+++ b/app/src/main/java/com/example/mealer_project/data/sources/actions/MealActions.java	(date 1668376406782)
@@ -11,7 +11,7 @@
 import com.example.mealer_project.app.App;
 import com.example.mealer_project.data.entity_models.MealEntityModel;
 import com.example.mealer_project.data.models.Chef;
-import com.example.mealer_project.data.models.Meal;
+import com.example.mealer_project.data.models.meals.Meal;
 import com.example.mealer_project.utils.Preconditions;
 import com.google.android.gms.tasks.OnCompleteListener;
 import com.google.android.gms.tasks.OnFailureListener;
Index: app/src/main/java/com/example/mealer_project/data/sources/FirebaseRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mealer_project.data.sources;\n\nimport static android.content.ContentValues.TAG;\n\nimport android.util.Log;\n\nimport androidx.annotation.NonNull;\n\nimport com.example.mealer_project.app.App;\nimport com.example.mealer_project.data.entity_models.AddressEntityModel;\nimport com.example.mealer_project.data.entity_models.CreditCardEntityModel;\nimport com.example.mealer_project.data.entity_models.UserEntityModel;\nimport com.example.mealer_project.data.models.Address;\nimport com.example.mealer_project.data.models.Admin;\nimport com.example.mealer_project.data.models.Chef;\nimport com.example.mealer_project.data.models.Client;\nimport com.example.mealer_project.data.models.CreditCard;\nimport com.example.mealer_project.data.models.Meal;\nimport com.example.mealer_project.data.models.UserRoles;\nimport com.example.mealer_project.data.sources.actions.AuthActions;\nimport com.example.mealer_project.data.sources.actions.InboxActions;\nimport com.example.mealer_project.data.sources.actions.MealActions;\nimport com.example.mealer_project.data.sources.actions.UserActions;\nimport com.example.mealer_project.ui.screens.LoginScreen;\nimport com.example.mealer_project.ui.screens.SignupScreen;\nimport com.example.mealer_project.utils.Response;\nimport com.google.android.gms.tasks.OnCompleteListener;\nimport com.google.android.gms.tasks.OnFailureListener;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.android.gms.tasks.Task;\nimport com.google.firebase.auth.AuthResult;\nimport com.google.firebase.auth.FirebaseAuth;\nimport com.google.firebase.auth.FirebaseUser;\nimport com.google.firebase.firestore.DocumentReference;\nimport com.google.firebase.firestore.DocumentSnapshot;\nimport com.google.firebase.firestore.FirebaseFirestore;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class FirebaseRepository {\n\n    public UserActions USER;\n    public AuthActions AUTH;\n    public InboxActions INBOX;\n    public MealActions MEALS;\n\n    public FirebaseRepository(FirebaseAuth mAuth) {\n        FirebaseFirestore db = FirebaseFirestore.getInstance();\n        this.USER = new UserActions(db);\n        this.AUTH = new AuthActions(mAuth, db, this);\n        this.INBOX = new InboxActions(db, this);\n        this.MEALS = new MealActions(db);\n    }\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mealer_project/data/sources/FirebaseRepository.java b/app/src/main/java/com/example/mealer_project/data/sources/FirebaseRepository.java
--- a/app/src/main/java/com/example/mealer_project/data/sources/FirebaseRepository.java	(revision af2aa847fa3bc38c4df1c7078b34098f284e7c28)
+++ b/app/src/main/java/com/example/mealer_project/data/sources/FirebaseRepository.java	(date 1668376943547)
@@ -15,7 +15,7 @@
 import com.example.mealer_project.data.models.Chef;
 import com.example.mealer_project.data.models.Client;
 import com.example.mealer_project.data.models.CreditCard;
-import com.example.mealer_project.data.models.Meal;
+import com.example.mealer_project.data.models.meals.Meal;
 import com.example.mealer_project.data.models.UserRoles;
 import com.example.mealer_project.data.sources.actions.AuthActions;
 import com.example.mealer_project.data.sources.actions.InboxActions;
Index: app/src/main/java/com/example/mealer_project/ui/screens/MenuFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mealer_project.ui.screens;\n\nimport android.os.Bundle;\n\nimport androidx.fragment.app.Fragment;\n\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport com.example.mealer_project.R;\n\n/**\n * A simple {@link Fragment} subclass.\n * Use the {@link MenuFragment#newInstance} factory method to\n * create an instance of this fragment.\n */\npublic class MenuFragment extends Fragment {\n\n    // TODO: Rename parameter arguments, choose names that match\n    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER\n    private static final String ARG_PARAM1 = \"param1\";\n    private static final String ARG_PARAM2 = \"param2\";\n\n    // TODO: Rename and change types of parameters\n    private String mParam1;\n    private String mParam2;\n\n    public MenuFragment() {\n        // Required empty public constructor\n    }\n\n    /**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @param param1 Parameter 1.\n     * @param param2 Parameter 2.\n     * @return A new instance of fragment MenuFragment.\n     */\n    // TODO: Rename and change types and number of parameters\n    public static MenuFragment newInstance(String param1, String param2) {\n        MenuFragment fragment = new MenuFragment();\n        Bundle args = new Bundle();\n        args.putString(ARG_PARAM1, param1);\n        args.putString(ARG_PARAM2, param2);\n        fragment.setArguments(args);\n        return fragment;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        if (getArguments() != null) {\n            mParam1 = getArguments().getString(ARG_PARAM1);\n            mParam2 = getArguments().getString(ARG_PARAM2);\n        }\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_menu, container, false);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mealer_project/ui/screens/MenuFragment.java b/app/src/main/java/com/example/mealer_project/ui/screens/MenuFragment.java
--- a/app/src/main/java/com/example/mealer_project/ui/screens/MenuFragment.java	(revision af2aa847fa3bc38c4df1c7078b34098f284e7c28)
+++ b/app/src/main/java/com/example/mealer_project/ui/screens/MenuFragment.java	(date 1668373853258)
@@ -2,6 +2,7 @@
 
 import android.os.Bundle;
 
+import androidx.annotation.NonNull;
 import androidx.fragment.app.Fragment;
 
 import android.view.LayoutInflater;
@@ -63,4 +64,5 @@
         // Inflate the layout for this fragment
         return inflater.inflate(R.layout.fragment_menu, container, false);
     }
+
 }
\ No newline at end of file
Index: app/src/main/java/com/example/mealer_project/data/models/meals/Meals.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mealer_project.data.models.meals;\n\nimport androidx.annotation.NonNull;\n\nimport com.example.mealer_project.data.models.Meal;\nimport com.example.mealer_project.utils.Preconditions;\nimport com.example.mealer_project.utils.Response;\nimport com.example.mealer_project.utils.Result;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Meals {\n\n    // Store Meals in a Map<MealID, Meal> key-value pairs\n    private Map<String, Meal> meals;\n\n    /**\n     * Default constructor initializes a HashMap for storing Meals\n     */\n    public Meals() {\n        this.meals = new HashMap<>(); //<MealID, Meal> key-value pair\n    }\n\n    /**\n     * Retrieve a meal from all meals of the Chef by meal ID\n     * @param mealID representing the ID of the meal\n     * @return a Result object containing the meal is successful in getting the associated meal, else error message\n     */\n    public Result<Meal, String> getMeal(@NonNull String mealID) {\n        // guard-clause\n        if (Preconditions.isNotEmptyString(mealID)) {\n            // check if meal exists\n            if (this.meals.get(mealID) != null) {\n                return new Result<>(this.meals.get(mealID), null);\n            } else {\n                return new Result<>(null, \"Could not find any meal for the provided meal ID\");\n            }\n        } else {\n            return new Result<>(null, \"Invalid meal ID provided\");\n        }\n    }\n\n    public void setMeals(@NonNull Map<String, Meal> mealsData) {\n        this.meals = mealsData;\n    }\n\n    /**\n     * Add a new meal to the chef's list of meals (menu)\n     * @param newMeal Meal to be added\n     */\n    public Response addMeal(@NonNull Meal newMeal) {\n        // guard-clause\n        // meal must have a valid id which will be used as a key\n        if (Preconditions.isNotEmptyString(newMeal.getMealID())) {\n            // check if meal already exists\n            if (this.meals.get(newMeal.getMealID()) != null) {\n                return new Response(false, \"Meal with same ID already exists! Use updateMeal to update an existing meal\");\n            }\n            // add the new meal\n            this.meals.put(newMeal.getMealID(), newMeal);\n            // return success\n            return new Response(true);\n        } else {\n            return new Response(false, \"Meal does not have a valid ID\");\n        }\n    }\n\n    /**\n     * Add a meal to the chef's offered meal\n     * @param mealId ID of the meal that needs to be added to the menu\n     * @return Response object indicating success, or failure (with an error message)\n     */\n    public Response addMealToOfferedList(@NonNull String mealId) {\n        // guard-clause\n        if (Preconditions.isNotEmptyString(mealId)) {\n            // check if meal exists and has a valid object\n            if (this.meals.get(mealId) != null) {\n                // add meal to the menu\n                this.meals.get(mealId).setOffered(true);\n                // return success\n                return new Response(true);\n            } else {\n                return new Response(false, \"Could not find the any meal for the provided ID\");\n            }\n        } else {\n            return new Response(false, \"Meal does not have a valid ID\");\n        }\n    }\n\n    /**\n     * Remove a meal from the list of all meals added by a Chef\n     * @param mealId ID of the meal to be removed\n     */\n    public Response removeMeal(@NonNull String mealId) {\n        // guard-clause\n        if (Preconditions.isNotEmptyString(mealId)) {\n            // check if meal exists\n            if (this.meals.get(mealId) != null) {\n                // remove the meal\n                this.meals.remove(mealId);\n                // return operation success\n                return new Response(true);\n            } else {\n                return new Response(false, \"Could not find any meal for the provided meal ID\");\n            }\n        } else {\n            return new Response(false, \"Invalid meal ID provided\");\n        }\n    }\n\n    /**\n     * Remove a meal from Chef's offered meals\n     * @param mealId ID of the meal to be removed\n     */\n    public Response removeMealFromOfferedList(@NonNull String mealId) {\n        // guard-clause\n        if (Preconditions.isNotEmptyString(mealId)) {\n            // check if meal exists\n            if (this.meals.get(mealId) != null) {\n                // remove meal from menu\n                this.meals.get(mealId).setOffered(false);\n                // return operation success\n                return new Response(true);\n            } else {\n                return new Response(false, \"Could not find any meal for the provided meal ID\");\n            }\n        } else {\n            return new Response(false, \"Invalid meal ID provided\");\n        }\n    };\n\n    /**\n     * Update an existing meal\n     * @param meal meal instance, must have a valid meal ID\n     * @return Response indicating operation success or failure\n     */\n    public Response updateMeal(@NonNull Meal meal) {\n        // guard-clause\n        // meal must have a valid id which will be used as a key\n        if (Preconditions.isNotEmptyString(meal.getMealID())) {\n            // check if meal doesn't exists\n            if (!this.meals.containsKey(meal.getMealID())) {\n                return new Response(false, \"Could not find a meal for the given meal ID\");\n            }\n            // update the meal\n            this.meals.put(meal.getMealID(), meal);\n            // return success\n            return new Response(true);\n        } else {\n            return new Response(false, \"Meal does not have a valid ID\");\n        }\n    }\n\n    /**\n     * Method to retrieve a map object containing meals which are currently being offered by Chef\n     * @return a Map containing Meal ID's as keys and Meal objects as values\n     */\n    public Map<String, Meal> getOfferedMeals() {\n        // map to store the result\n        HashMap<String, Meal> offeredMeals = new HashMap<>();\n        // filter and add offered meals to above map\n        for (Meal meal : this.meals.values()) {\n            if (meal.isOffered()) {\n                offeredMeals.put(meal.getMealID(), meal);\n            }\n        }\n        // return the result\n        return offeredMeals;\n    }\n\n    /**\n     * Method to retrieve a map object containing all meals added by the Chef\n     * @return a Map containing Meal ID's as keys and Meal objects as values\n     */\n    public Map<String, Meal> getMenu() {\n        return this.meals;\n    };\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mealer_project/data/models/meals/Meals.java b/app/src/main/java/com/example/mealer_project/data/models/meals/Meals.java
--- a/app/src/main/java/com/example/mealer_project/data/models/meals/Meals.java	(revision af2aa847fa3bc38c4df1c7078b34098f284e7c28)
+++ b/app/src/main/java/com/example/mealer_project/data/models/meals/Meals.java	(date 1668376440880)
@@ -2,7 +2,7 @@
 
 import androidx.annotation.NonNull;
 
-import com.example.mealer_project.data.models.Meal;
+import com.example.mealer_project.data.models.meals.Meal;
 import com.example.mealer_project.utils.Preconditions;
 import com.example.mealer_project.utils.Response;
 import com.example.mealer_project.utils.Result;
Index: app/src/main/res/layout/fragment_meal_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_meal_item.xml b/app/src/main/res/layout/fragment_meal_item.xml
new file mode 100644
--- /dev/null	(date 1668376035066)
+++ b/app/src/main/res/layout/fragment_meal_item.xml	(date 1668376035066)
@@ -0,0 +1,79 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".ui.screens.MealItemFragment">
+
+    <!-- TODO: Update blank fragment layout -->
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+
+        <TextView
+            android:id="@+id/fMealName"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:minHeight="50dp"
+            android:text="Meal Name" />
+
+        <TextView
+            android:id="@+id/fDescription"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Description" />
+
+        <TextView
+            android:id="@+id/fMealDescription"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:minHeight="100dp"
+            android:text="Meal Description" />
+
+        <LinearLayout
+            android:id="@+id/fOfferedLayout"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+            <TextView
+                android:id="@+id/fOfferedLabel"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="@string/meal_item_offered_label" />
+
+            <TextView
+                android:id="@+id/fOffered"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:minHeight="50dp"
+                android:text="Offered or not" />
+        </LinearLayout>
+
+        <LinearLayout
+            android:id="@+id/fCuisineLayout"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:minHeight="50dp"
+            android:orientation="horizontal">
+
+            <TextView
+                android:id="@+id/fCuisineLabel"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:text="@string/meal_item_cuisine_label" />
+
+            <TextView
+                android:id="@+id/fCuisineType"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:minHeight="50dp"
+                android:text="Cuisine Type" />
+        </LinearLayout>
+    </LinearLayout>
+
+</FrameLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/mealer_project/ui/screens/MealItemFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mealer_project/ui/screens/MealItemFragment.java b/app/src/main/java/com/example/mealer_project/ui/screens/MealItemFragment.java
new file mode 100644
--- /dev/null	(date 1668376992816)
+++ b/app/src/main/java/com/example/mealer_project/ui/screens/MealItemFragment.java	(date 1668376992816)
@@ -0,0 +1,64 @@
+package com.example.mealer_project.ui.screens;
+
+import android.os.Bundle;
+
+import androidx.fragment.app.Fragment;
+
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.example.mealer_project.R;
+import com.example.mealer_project.data.models.meals.Meal;
+
+/**
+ * A simple {@link Fragment} subclass.
+ * Use the {@link MealItemFragment#newInstance} factory method to
+ * create an instance of this fragment.
+ */
+public class MealItemFragment extends Fragment {
+
+    // TODO: Rename parameter arguments, choose names that match
+    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
+    private static final String MEAL_DATA = "MEAL_DATA";
+
+    // TODO: Rename and change types of parameters
+    private String mealData;
+
+    public MealItemFragment() {
+        // Required empty public constructor
+    }
+
+    /**
+     * Received a meal instance and returns a new MealItemFragment
+     * @param meal Meal instance
+     * @return A new instance of fragment MealItemFragment
+     */
+    public static MealItemFragment newInstance(Meal meal) {
+        MealItemFragment fragment = new MealItemFragment();
+        Bundle args = new Bundle();
+        args.putSerializable(MEAL_DATA, meal);
+        fragment.setArguments(args);
+        return fragment;
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        if (getArguments() != null) {
+            mealData = getArguments().getString(MEAL_DATA);
+        }
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        // Inflate the layout for this fragment
+        return inflater.inflate(R.layout.fragment_meal_item, container, false);
+    }
+
+    private void populateMealItemData() {
+//        TextView mealName = (TextView)
+    }
+}
\ No newline at end of file
