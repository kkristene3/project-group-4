Index: app/src/main/java/com/example/mealer_project/ui/screens/AdminScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mealer_project.ui.screens;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.Button;\nimport android.widget.ListView;\n\nimport com.example.mealer_project.R;\nimport com.example.mealer_project.app.App;\nimport com.example.mealer_project.data.handlers.InboxHandler;\nimport com.example.mealer_project.data.models.User;\nimport com.example.mealer_project.data.models.inbox.AdminInbox;\nimport com.example.mealer_project.data.models.inbox.Complaint;\nimport com.example.mealer_project.ui.core.StatefulView;\nimport com.example.mealer_project.ui.core.UIScreen;\nimport com.google.firebase.auth.FirebaseAuth;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\n\npublic class AdminScreen extends UIScreen implements StatefulView {\n\n    int numOfButtons;\n    ListView complaintList;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_admin_screen);\n\n        App.getInboxHandler().updateAdminInbox(this);\n\n        complaintList = findViewById(R.id.complaintList);\n        complaintList.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n                startActivity(new Intent(getApplicationContext(), ComplaintScreen.class));\n            }\n        });\n    }\n\n    @Override\n    public void updateUI() {\n\n    }\n\n    @Override\n    public void showNextScreen() {\n\n    }\n\n    public void clickLogout(View view) {\n        Intent intent = new Intent(this, IntroScreen.class);\n        startActivity(intent);\n        //finish(); // change later to proper code\n        FirebaseAuth.getInstance().signOut();\n    }\n\n    private void displayComplaints() {\n        try {\n            Log.e(\"NUMBER COMPLAINTS\", String.valueOf(App.getAdminInbox().getComplaints().size()));\n\n            List<String> complaintTitles = new ArrayList<String>();\n\n            for (Complaint eachComplaint: App.getAdminInbox().getComplaints().values()) {\n                complaintTitles.add(eachComplaint.getTitle());\n            }\n\n\n            ArrayAdapter<String> arrayAdapter = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_list_item_1, complaintTitles);\n            complaintList.setAdapter(arrayAdapter);\n        } catch (Exception e) {\n            Log.e(\"displayComplaints\", \"user doesn't have access\");\n        }\n\n    }\n\n    //Display complaints\n    public void successLoadingAdminInbox() {\n        displayComplaints();\n        displaySuccessToast(\"Complaints loaded!\");\n    }\n\n    public void failedToLoadComplaints(String s) {\n        displayErrorToast(s);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mealer_project/ui/screens/AdminScreen.java b/app/src/main/java/com/example/mealer_project/ui/screens/AdminScreen.java
--- a/app/src/main/java/com/example/mealer_project/ui/screens/AdminScreen.java	(revision 92a27e902f27ba5efd108977f48fc8577d5e695f)
+++ b/app/src/main/java/com/example/mealer_project/ui/screens/AdminScreen.java	(date 1667765629457)
@@ -6,30 +6,25 @@
 import android.view.View;
 import android.widget.AdapterView;
 import android.widget.ArrayAdapter;
-import android.widget.Button;
 import android.widget.ListView;
 
 import com.example.mealer_project.R;
 import com.example.mealer_project.app.App;
-import com.example.mealer_project.data.handlers.InboxHandler;
-import com.example.mealer_project.data.models.User;
-import com.example.mealer_project.data.models.inbox.AdminInbox;
 import com.example.mealer_project.data.models.inbox.Complaint;
 import com.example.mealer_project.ui.core.StatefulView;
 import com.example.mealer_project.ui.core.UIScreen;
 import com.google.firebase.auth.FirebaseAuth;
 
 import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
 
 
 public class AdminScreen extends UIScreen implements StatefulView {
 
     int numOfButtons;
-    ListView complaintList;
+    ListView complaintListView;
+    List<Complaint> complaintsData;
+    public final static String COMPLAINT_OBJ_INTENT_KEY = "complaint";
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -38,11 +33,37 @@
 
         App.getInboxHandler().updateAdminInbox(this);
 
-        complaintList = findViewById(R.id.complaintList);
-        complaintList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+        complaintListView = findViewById(R.id.complaintList);
+        complaintListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                startActivity(new Intent(getApplicationContext(), ComplaintScreen.class));
+
+                // guard-clause
+                if (complaintsData == null) {
+                    Log.e("setOnItemClickListener", "complaintsData is null");
+                    displayErrorToast("No complaints available");
+                }
+
+                // get the complaint
+                Complaint complaint = null;
+
+                try {
+                    complaint = (Complaint) complaintListView.getItemAtPosition(position);
+                } catch (Exception e) {
+                    Log.e("setOnItemClickListener", "unable to create complaint object");
+                    displayErrorToast("Unable to process request!");
+                }
+
+                if (complaint != null) {
+                    // complaint = complaints[pos]
+                    Intent complaintScreenIntent = new Intent(getApplicationContext(), ComplaintScreen.class);
+                    complaintScreenIntent.putExtra(COMPLAINT_OBJ_INTENT_KEY, complaint);
+                    startActivity(complaintScreenIntent);
+                } else {
+                    displayErrorToast("unable to show complaint info");
+                }
+
+
             }
         });
     }
@@ -66,17 +87,17 @@
 
     private void displayComplaints() {
         try {
-            Log.e("NUMBER COMPLAINTS", String.valueOf(App.getAdminInbox().getComplaints().size()));
+            complaintsData = App.getAdminInbox().getListOfComplaints();
+
+            Log.e("NUMBER COMPLAINTS", String.valueOf(complaintsData.size()));
 
             List<String> complaintTitles = new ArrayList<String>();
 
-            for (Complaint eachComplaint: App.getAdminInbox().getComplaints().values()) {
+            for (Complaint eachComplaint: complaintsData) {
                 complaintTitles.add(eachComplaint.getTitle());
             }
-
-
             ArrayAdapter<String> arrayAdapter = new ArrayAdapter<>(getApplicationContext(), android.R.layout.simple_list_item_1, complaintTitles);
-            complaintList.setAdapter(arrayAdapter);
+            complaintListView.setAdapter(arrayAdapter);
         } catch (Exception e) {
             Log.e("displayComplaints", "user doesn't have access");
         }
Index: app/src/main/java/com/example/mealer_project/data/models/inbox/Complaint.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mealer_project.data.models.inbox;\n\nimport com.example.mealer_project.data.entity_models.ComplaintEntityModel;\n\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Comparator;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\n/**\n * Complaint class to create instances of complaints which will be stored in an inbox\n * Implements Comparator to enable sorting of complaints by date submitted\n */\npublic class Complaint implements Comparator<Complaint> {\n    // instance variables\n    private String id;\n    private String title;\n    private String description;\n    private String clientId;\n    private String chefId;\n    private Date dateSubmitted;\n\n    /**\n     * Using enum to define property names of a complaint in a structured (and more rigid) manner\n     * Prevents use of hard-coded string throughout application where property of a complaints to be used\n     * Used in InboxActions, as property names here are same as field names on firebase\n     */\n    public enum COMPLAINT_PROPERTY {\n        id,\n        title,\n        description,\n        clientId,\n        chefId,\n        dateSubmitted\n    };\n\n    /**\n     * Constructor to create a new complaint instance by providing values for all instance variables\n     * @param id complaint id\n     * @param title title of complaint\n     * @param description description of complaint\n     * @param clientId id of client who submitted the complaint\n     * @param chefId id of chef regarding whom complaint has been submitted\n     * @param dateSubmitted date on which complaint is submitted\n     */\n    public Complaint(String id, String title, String description, String clientId, String chefId, Date dateSubmitted) {\n        setId(id);\n        setTitle(title);\n        setDescription(description);\n        setClientId(clientId);\n        setChefId(chefId);\n        setDateSubmitted(dateSubmitted);\n    }\n\n    public Complaint(String id, String title, String description, String clientId, String chefId, String dateSubmitted) throws ParseException {\n        setId(id);\n        setTitle(title);\n        setDescription(description);\n        setClientId(clientId);\n        setChefId(chefId);\n        setDateSubmitted(dateSubmitted);\n    }\n\n    /**\n     * Constructor to create a new complaint instance by providing ComplaintEntityModel\n     * @param complaintData ComplaintEntityModel containing unvalidated date\n     */\n    public Complaint(ComplaintEntityModel complaintData) throws ParseException {\n        setId(complaintData.getId());\n        setTitle(complaintData.getTitle());\n        setDescription(complaintData.getDescription());\n        setClientId(complaintData.getClientId());\n        setChefId(complaintData.getChefId());\n        // set the date submitted, receives value as string, throws ParseException if format is incorrect\n        setDateSubmitted(complaintData.getDateSubmitted());\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public String getClientId() {\n        return clientId;\n    }\n\n    public void setClientId(String clientId) {\n        this.clientId = clientId;\n    }\n\n    public String getChefId() {\n        return chefId;\n    }\n\n    public void setChefId(String chefId) {\n        this.chefId = chefId;\n    }\n\n    public Date getDateSubmitted() {\n        return dateSubmitted;\n    }\n\n    public void setDateSubmitted(Date dateSubmitted) {\n        this.dateSubmitted = dateSubmitted;\n    }\n\n    private void setDateSubmitted(String dateSubmitted) throws ParseException {\n        // mm-dd--yyyy\n        this.dateSubmitted = DateFormat.getDateInstance(DateFormat.SHORT, Locale.US).parse(dateSubmitted);\n    }\n\n    public Map<String, Object> getComplaintDataMap() {\n        HashMap<String, Object> complaintDataMap = new HashMap<>();\n        complaintDataMap.put(COMPLAINT_PROPERTY.title.toString(), this.title);\n        complaintDataMap.put(COMPLAINT_PROPERTY.description.toString(), this.description);\n        complaintDataMap.put(COMPLAINT_PROPERTY.clientId.toString(), this.clientId);\n        complaintDataMap.put(COMPLAINT_PROPERTY.chefId.toString(), this.chefId);\n        complaintDataMap.put(COMPLAINT_PROPERTY.dateSubmitted.toString(), this.dateSubmitted);\n        return complaintDataMap;\n    }\n\n    /**\n     * Allows complaint instances to be sorted by date submitted\n     * @return 0 if submitted on same date, -1 is complaint1 was submitted earlier, 1 if complaint1 was submitted later\n     */\n    @Override\n    public int compare(Complaint complaint1, Complaint complaint2) {\n        return complaint1.getDateSubmitted().compareTo(complaint2.getDateSubmitted());\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mealer_project/data/models/inbox/Complaint.java b/app/src/main/java/com/example/mealer_project/data/models/inbox/Complaint.java
--- a/app/src/main/java/com/example/mealer_project/data/models/inbox/Complaint.java	(revision 92a27e902f27ba5efd108977f48fc8577d5e695f)
+++ b/app/src/main/java/com/example/mealer_project/data/models/inbox/Complaint.java	(date 1667765479149)
@@ -1,7 +1,10 @@
 package com.example.mealer_project.data.models.inbox;
 
+import android.os.Parcelable;
+
 import com.example.mealer_project.data.entity_models.ComplaintEntityModel;
 
+import java.io.Serializable;
 import java.text.DateFormat;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
@@ -15,7 +18,7 @@
  * Complaint class to create instances of complaints which will be stored in an inbox
  * Implements Comparator to enable sorting of complaints by date submitted
  */
-public class Complaint implements Comparator<Complaint> {
+public class Complaint implements Comparator<Complaint>, Serializable {
     // instance variables
     private String id;
     private String title;
Index: app/src/main/java/com/example/mealer_project/ui/screens/ComplaintScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mealer_project.ui.screens;\n\nimport android.app.DatePickerDialog;\nimport android.graphics.Color;\nimport android.graphics.drawable.ColorDrawable;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.DatePicker;\nimport android.widget.TextView;\n\nimport com.example.mealer_project.R;\nimport com.example.mealer_project.ui.core.StatefulView;\nimport com.example.mealer_project.ui.core.UIScreen;\n\nimport java.util.Calendar;\n\npublic class ComplaintScreen extends UIScreen implements StatefulView{\n    private Button banButton;\n    private DatePickerDialog datePickerDialog;\n    DatePickerDialog.OnDateSetListener dateSetListener;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_complaint_screen);\n        banButton = findViewById(R.id.ban_chef);\n    }\n\n    @Override\n    public void updateUI() {\n    }\n\n\n    /**\n     * Updates the text on the complaint screen\n     * @param title\n     * @param client\n     * @param chef\n     * @param meal\n     * @param description\n     */\n    public void updateUI(String title, String client, String chef, String meal, String description) {\n        // sets the complaint header title\n        TextView textTitle = (TextView)findViewById(R.id.complaintHeader);\n        textTitle.setText(title);\n\n        // sets the text for client name\n        TextView textClient = (TextView)findViewById(R.id.clientName);\n        textClient.setText(\"Client: \" + client);\n\n        // sets the text for chef name\n        TextView textChef = (TextView)findViewById(R.id.chefName);\n        textChef.setText(\"Chef: \" + chef);\n\n        // sets the text for meal\n        TextView textMeal = (TextView)findViewById(R.id.mealName);\n        textMeal.setText(\"Meal: \" + meal);\n\n        // sets the text for description\n        TextView textDescription = (TextView)findViewById(R.id.descriptionTitle);\n        textDescription.setText(\"Description: \" + description);\n    }\n\n    @Override\n    public void showNextScreen() {\n\n    }\n\n    public void openDatePicker(View view){\n        Calendar cal = Calendar.getInstance();\n        int year = cal.get(Calendar.YEAR);\n        int month = cal.get(Calendar.MONTH);\n        int day = cal.get(Calendar.DAY_OF_MONTH);\n\n        datePickerDialog = new DatePickerDialog(ComplaintScreen.this, android.R.style.Theme_Holo_Light_Dialog_MinWidth, dateSetListener, year, month, day);\n        datePickerDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\n        datePickerDialog.show();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mealer_project/ui/screens/ComplaintScreen.java b/app/src/main/java/com/example/mealer_project/ui/screens/ComplaintScreen.java
--- a/app/src/main/java/com/example/mealer_project/ui/screens/ComplaintScreen.java	(revision 92a27e902f27ba5efd108977f48fc8577d5e695f)
+++ b/app/src/main/java/com/example/mealer_project/ui/screens/ComplaintScreen.java	(date 1667764233421)
@@ -77,4 +77,12 @@
         datePickerDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
         datePickerDialog.show();
     }
+
+
+    public void onDateSet (DatePicker view,
+                                    int year,
+                                    int month,
+                                    int dayOfMonth) {
+
+    }
 }
Index: app/src/main/java/com/example/mealer_project/data/models/inbox/AdminInbox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mealer_project.data.models.inbox;\n\nimport android.util.Log;\n\nimport java.sql.Date;\nimport java.util.HashMap;\nimport java.util.List;\n\nimport com.example.mealer_project.app.App;\nimport com.example.mealer_project.utils.Preconditions;\n\n/**\n * Complaints inbox of Admin\n */\npublic class AdminInbox implements Inbox {\n    // store complaints in a Map for quickly accessing any complaint by it's id without need for traversal\n    private HashMap<String, Complaint> complaints;\n\n    /**\n     * Create a new admin inbox\n     */\n    public AdminInbox() {\n        complaints = new HashMap<>();\n    }\n\n    /**\n     * Create a new admin inbox when number of complaints is known\n     * Additional advantage: avoids overhead of dynamic memory for array based maps\n     */\n    public AdminInbox(int size) {\n        complaints = new HashMap<>(size);\n    }\n\n    /**\n     * Create a new admin inbox by providing list of complaints\n     * @param inboxComplaints list of complaints to be added to the inbox\n     */\n    public AdminInbox(List<Complaint> inboxComplaints) throws NullPointerException {\n        complaints = new HashMap<>(inboxComplaints.size());\n        this.addComplaints(inboxComplaints);\n    }\n\n    /**\n     * Method to get all complaints\n     * @return a HashMap structure with keys as complaint id and values as Complaint objects\n     */\n    public HashMap<String, Complaint> getComplaints() {\n        return this.complaints;\n    }\n\n    /**\n     * Add a complaint to the inbox\n     * @param complaint Complaint object to be added to inbox\n     * @throws NullPointerException if provided complaint ID object is null\n     */\n    @Override\n    public void addComplaint(Complaint complaint) throws NullPointerException {\n\n        // validate complaint object\n        if (complaint == null) {\n            // log for programmer, and exception message for client\n            Log.e(\"addComplaint\", \"addComplaint: Complaint object provided is null\");\n            throw new NullPointerException(\"Trying to add an invalid complaint!\");\n        }\n        // add complaint\n        this.complaints.put(complaint.getId(), complaint);\n    }\n\n    /**\n     * Add multiple complaints by providing a list of complaints\n     * @param complaints list of complaints to be added to the inbox\n     * @throws NullPointerException if provided list of complaints is null\n     */\n    public void addComplaints(List<Complaint> complaints) throws NullPointerException {\n        // validate complaint object\n        if (Preconditions.isNotEmptyList(complaints)) {\n            // add all complaints to the admin inbox\n            for (Complaint complaint: complaints) {\n                // add complaint, throws NullPointerException if complaint is null\n                this.addComplaint(complaint);\n            }\n        } else {\n            // log for programmer, and exception message for client\n            Log.e(\"addComplaints\", \"addComplaints: List<Complaint> provided is null\");\n            throw new NullPointerException(\"No complaints provided to be added to the inbox!\");\n        }\n    }\n\n    /**\n     * Remove a complaint by ID\n     * @param complaintId ID of complaint to be removed\n     * @throws NullPointerException if provided complaint ID object is null\n     */\n    @Override\n    public void removeComplaint(String complaintId) throws NullPointerException {\n        if (Preconditions.isNotEmptyString(complaintId)) {\n            // remove the complaint\n            complaints.remove(complaintId);\n\n\n        } else {\n            // log for programmer, and exception message for client\n            Log.e(\"removeComplaint\", \"complaintId provided is null\");\n            throw new NullPointerException(\"No complaint ID provided!\");\n        }\n    }\n\n    /**\n     * Get a complaint by id\n     * @param complaintId ID of the complaint to retrieve\n     * @return Returns the complaint object which matched the provided complaint ID else false\n     * @throws NullPointerException if provided complaint ID object is null\n     */\n    @Override\n    public Complaint getComplaint(String complaintId) throws NullPointerException {\n        if (Preconditions.isNotEmptyString(complaintId)) {\n            // return the complaint object if it exists, else null\n            return complaints.get(complaintId);\n        } else {\n            // log for programmer, and exception message for client\n            Log.e(\"getComplaint\", \"complaintId provided is null\");\n            throw new NullPointerException(\"No complaint ID provided!\");\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mealer_project/data/models/inbox/AdminInbox.java b/app/src/main/java/com/example/mealer_project/data/models/inbox/AdminInbox.java
--- a/app/src/main/java/com/example/mealer_project/data/models/inbox/AdminInbox.java	(revision 92a27e902f27ba5efd108977f48fc8577d5e695f)
+++ b/app/src/main/java/com/example/mealer_project/data/models/inbox/AdminInbox.java	(date 1667765005345)
@@ -48,6 +48,10 @@
         return this.complaints;
     }
 
+    public List<Complaint> getListOfComplaints() {
+        return (List<Complaint>) this.complaints.values();
+    }
+
     /**
      * Add a complaint to the inbox
      * @param complaint Complaint object to be added to inbox
